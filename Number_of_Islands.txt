let grid1 = [
    ['1','1','1','1','0'],
    ['1','1','0','1','0'],
    ['1','1','0','0','0'],
    ['0','0','0','0','0']
];

let grid2 = [
    ['1','1','0','0','0'],
    ['1','1','0','0','0'],
    ['0','0','1','0','0'],
    ['0','0','0','1','1']
];

function numIslands (grid) {
    if (grid.length === 0) return 0
    let rowsL = grid.length;
    let colsL = grid[0].length;
    let counter = 0;

    for (let R  = 0; R < rowsL; R++) {
        for (let C  = 0; C < colsL; C++) {

            if (grid[R][C] === '1' ) {
                counter++;
                markNeighbours(grid, R,C);
            }
        }
    }

    return counter;
};

function markNeighbours(binaryMatrix, R,C) {
    binaryMatrix[R][C] = '6';
    if (binaryMatrix?.[R-1]?.[C] === '1') { markNeighbours(binaryMatrix, R-1,C)}
    if (binaryMatrix?.[R+1]?.[C] === '1') { markNeighbours(binaryMatrix, R+1,C)}
    if (binaryMatrix[R][C-1] === '1') { markNeighbours(binaryMatrix, R,C-1)}
    if (binaryMatrix[R][C+1] === '1') { markNeighbours(binaryMatrix, R,C+1)}
}

console.log(numIslands(grid1));
console.log(numIslands(grid2));